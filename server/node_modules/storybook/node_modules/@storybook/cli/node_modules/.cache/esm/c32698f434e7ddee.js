let fse,path,isDefaultProjectSet,editStorybookTsConfig,getAngularAppTsConfigJson,getAngularAppTsConfigPath,getVersions,getPackageJson,writePackageJson,getBabelDependencies,installDependencies,writeFileAsJson;_34e‍.x([["default",()=>_34e‍.o]]);_34e‍.w("fs-extra",[["default",["fse"],function(v){fse=v}]]);_34e‍.w("path",[["default",["path"],function(v){path=v}]]);_34e‍.w("./angular-helpers",[["isDefaultProjectSet",["isDefaultProjectSet"],function(v){isDefaultProjectSet=v}],["editStorybookTsConfig",["editStorybookTsConfig"],function(v){editStorybookTsConfig=v}],["getAngularAppTsConfigJson",["getAngularAppTsConfigJson"],function(v){getAngularAppTsConfigJson=v}],["getAngularAppTsConfigPath",["getAngularAppTsConfigPath"],function(v){getAngularAppTsConfigPath=v}]]);_34e‍.w("../../lib/helpers",[["getVersions",["getVersions"],function(v){getVersions=v}],["getPackageJson",["getPackageJson"],function(v){getPackageJson=v}],["writePackageJson",["writePackageJson"],function(v){writePackageJson=v}],["getBabelDependencies",["getBabelDependencies"],function(v){getBabelDependencies=v}],["installDependencies",["installDependencies"],function(v){installDependencies=v}],["writeFileAsJson",["writeFileAsJson"],function(v){writeFileAsJson=v}]]);
















async function addDependencies(npmOptions) {
  const [
    storybookVersion,
    notesVersion,
    actionsVersion,
    linksVersion,
    addonsVersion,
  ] = await getVersions(
    npmOptions,
    '@storybook/angular',
    '@storybook/addon-notes',
    '@storybook/addon-actions',
    '@storybook/addon-links',
    '@storybook/addons'
  );

  const packageJson = getPackageJson();

  packageJson.dependencies = packageJson.dependencies || {};
  packageJson.devDependencies = packageJson.devDependencies || {};

  packageJson.scripts = packageJson.scripts || {};
  packageJson.scripts.storybook = 'start-storybook -p 6006';
  packageJson.scripts['build-storybook'] = 'build-storybook';

  writePackageJson(packageJson);

  const babelDependencies = await getBabelDependencies(npmOptions, packageJson);

  installDependencies(npmOptions, [
    `@storybook/angular@${storybookVersion}`,
    `@storybook/addon-notes@${notesVersion}`,
    `@storybook/addon-actions@${actionsVersion}`,
    `@storybook/addon-links@${linksVersion}`,
    `@storybook/addons@${addonsVersion}`,
    ...babelDependencies,
  ]);
}

function editAngularAppTsConfig() {
  const tsConfigJson = getAngularAppTsConfigJson();
  const glob = '**/*.stories.ts';
  if (!tsConfigJson) {
    return;
  }

  const { exclude = [] } = tsConfigJson;
  if (exclude.includes(glob)) {
    return;
  }

  tsConfigJson.exclude = [...exclude, glob];
  writeFileAsJson(getAngularAppTsConfigPath(), tsConfigJson);
}

const _34e‍anonymous=async npmOptions => {
  if (!isDefaultProjectSet()) {
    throw new Error(
      'Could not find a default project in your Angular workspace. Add a project and re-run the installation.'
    );
  }

  fse.copySync(path.resolve(__dirname, 'template/'), '.', { overwrite: true });

  await addDependencies(npmOptions);
  editAngularAppTsConfig();
  editStorybookTsConfig(path.resolve('./.storybook/tsconfig.json'));
};_34e‍.d(_34e‍anonymous);

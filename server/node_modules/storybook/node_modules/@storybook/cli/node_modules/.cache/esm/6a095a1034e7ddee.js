let fse,path,getVersions,getPackageJson,writePackageJson,getBabelDependencies,installDependencies;_34e‍.x([["default",()=>_34e‍.o]]);_34e‍.w("fs-extra",[["default",["fse"],function(v){fse=v}]]);_34e‍.w("path",[["default",["path"],function(v){path=v}]]);_34e‍.w("../../lib/helpers",[["getVersions",["getVersions"],function(v){getVersions=v}],["getPackageJson",["getPackageJson"],function(v){getPackageJson=v}],["writePackageJson",["writePackageJson"],function(v){writePackageJson=v}],["getBabelDependencies",["getBabelDependencies"],function(v){getBabelDependencies=v}],["installDependencies",["installDependencies"],function(v){installDependencies=v}]]);









const _34e‍anonymous=async npmOptions => {
  const [storybookVersion, polymerLoaderVarion] = await getVersions(
    npmOptions,
    '@storybook/polymer',
    'polymer-webpack-loader'
  );
  fse.copySync(path.resolve(__dirname, 'template/'), '.', { overwrite: true });

  const packageJson = getPackageJson() || {}; // Maybe we are in a bower only project, still we need a package json

  packageJson.dependencies = packageJson.dependencies || {};
  packageJson.devDependencies = packageJson.devDependencies || {};

  packageJson.scripts = packageJson.scripts || {};
  packageJson.scripts.storybook = 'start-storybook -p 6006';
  packageJson.scripts['build-storybook'] = 'build-storybook';

  writePackageJson(packageJson);

  const devDependencies = [`@storybook/polymer@${storybookVersion}`];
  if (
    !packageJson.dependencies['polymer-webpack-loader'] &&
    !packageJson.devDependencies['polymer-webpack-loader']
  ) {
    devDependencies.push(`polymer-webpack-loader@${polymerLoaderVarion}`);
  }

  const babelDependencies = await getBabelDependencies(npmOptions, packageJson);

  installDependencies(npmOptions, [...devDependencies, ...babelDependencies]);
};_34e‍.d(_34e‍anonymous);

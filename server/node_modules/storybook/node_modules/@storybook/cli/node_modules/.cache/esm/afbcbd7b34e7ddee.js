let path,spawnSync,packageNames,getVersion,getVersions,getBabelDependencies,installDependencies,getPackageJson,writePackageJson;_34e‍.x([["default",()=>_34e‍.o]]);_34e‍.w("path",[["default",["path"],function(v){path=v}]]);_34e‍.w("cross-spawn",[["sync",["spawnSync"],function(v){spawnSync=v}]]);_34e‍.w("@storybook/codemod",[["packageNames",["packageNames"],function(v){packageNames=v}]]);_34e‍.w("../../lib/helpers",[["getVersion",["getVersion"],function(v){getVersion=v}],["getVersions",["getVersions"],function(v){getVersions=v}],["getBabelDependencies",["getBabelDependencies"],function(v){getBabelDependencies=v}],["installDependencies",["installDependencies"],function(v){installDependencies=v}],["getPackageJson",["getPackageJson"],function(v){getPackageJson=v}],["writePackageJson",["writePackageJson"],function(v){writePackageJson=v}]]);/* eslint-disable no-param-reassign */












async function updatePackage(devDependencies, oldName, newName, npmOptions) {
  if (devDependencies[oldName]) {
    delete devDependencies[oldName];
    devDependencies[newName] = await getVersion(npmOptions, newName);
  }
}

async function updatePackageJson(npmOptions) {
  const packageJson = getPackageJson();
  const { devDependencies } = packageJson;

  const [actionsVersion, linksVersion] = await getVersions(
    npmOptions,
    '@storybook/addon-actions',
    '@storybook/addon-links'
  );

  devDependencies['@storybook/addon-actions'] = actionsVersion;
  devDependencies['@storybook/addon-links'] = linksVersion;

  await Promise.all(
    Object.keys(packageNames).map(oldName => {
      const newName = packageNames[oldName];
      return updatePackage(devDependencies, oldName, newName, npmOptions);
    })
  );

  if (!devDependencies['@storybook/react'] && !devDependencies['@storybook/react-native']) {
    throw new Error('Expected to find `@kadira/[react-native]-storybook` in devDependencies');
  }

  writePackageJson(packageJson);

  const babelDependencies = await getBabelDependencies(npmOptions, packageJson);

  if (babelDependencies.length > 0) {
    installDependencies(npmOptions, babelDependencies);
  }
}

function updateSourceCode(parser) {
  const jscodeshiftPath = path.dirname(require.resolve('jscodeshift'));
  const jscodeshiftCommand = path.join(jscodeshiftPath, 'bin', 'jscodeshift.sh');

  ['update-organisation-name.js', 'move-buildin-addons.js'].forEach(codemod => {
    const codemodPath = path.join(
      path.dirname(require.resolve('@storybook/codemod')),
      'transforms',
      codemod
    );

    const args = ['-t', codemodPath, '--silent', '--ignore-pattern', '"node_modules|dist"', '.'];
    if (parser) args.push('--parser', parser);

    spawnSync(jscodeshiftCommand, args, { stdio: 'inherit' });
  });
}

const _34e‍anonymous=async (parser, npmOptions) => {
  await updatePackageJson(npmOptions);
  updateSourceCode(parser);
};_34e‍.d(_34e‍anonymous);
